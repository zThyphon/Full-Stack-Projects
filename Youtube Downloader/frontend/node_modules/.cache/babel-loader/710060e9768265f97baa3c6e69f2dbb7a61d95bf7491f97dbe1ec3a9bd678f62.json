{"ast":null,"code":"// validation.js\n\nfunction isYoutubeURL(url) {\n  // Regular expression to match YouTube video or channel URLs\n  const youtubeRegex = /^(https?:\\/\\/)?(www\\.)?(youtube\\.com\\/(channel\\/|c\\/)?|youtu\\.be\\/)/i;\n  // Test if the URL matches the regex pattern\n  console.log(\"isYoutubeResult: \" + youtubeRegex.test(url));\n  return youtubeRegex.test(url);\n}\nfunction enteredUrlValidation(url) {\n  if (url === \"\") {\n    alert(\"Enter a url!\");\n    return false;\n  }\n  const isYoutubeUrlResult = isYoutubeURL(url); // Corrected the argument here\n  if (!isYoutubeUrlResult) {\n    console.log(\"url in if: \" + url);\n    alert(\"Please enter a Youtube URL\");\n    return false;\n  }\n  if (url.includes(\",\")) {\n    console.log(\"else if works!\");\n    const splittedText = url.split(\",\");\n    let newText = \"\";\n    for (let i = 0; i < splittedText.length; i++) {\n      newText += splittedText[i] + \" \";\n    }\n    console.log(\"new Text: \" + newText);\n    dispatch(downloadActions.setVideoUrl(newText));\n    return true;\n  }\n  return true;\n}\nexport { isYoutubeURL, enteredUrlValidation };","map":{"version":3,"names":["isYoutubeURL","url","youtubeRegex","console","log","test","enteredUrlValidation","alert","isYoutubeUrlResult","includes","splittedText","split","newText","i","length","dispatch","downloadActions","setVideoUrl"],"sources":["C:/Users/Musta/OneDrive/Masaüstü/Youtube Downloader/frontend/src/Store/validation.js"],"sourcesContent":["// validation.js\r\n\r\nfunction isYoutubeURL(url) {\r\n  // Regular expression to match YouTube video or channel URLs\r\n  const youtubeRegex = /^(https?:\\/\\/)?(www\\.)?(youtube\\.com\\/(channel\\/|c\\/)?|youtu\\.be\\/)/i;\r\n  // Test if the URL matches the regex pattern\r\n  console.log(\"isYoutubeResult: \" + youtubeRegex.test(url));\r\n  return youtubeRegex.test(url);\r\n}\r\n\r\nfunction enteredUrlValidation(url) {\r\n  if (url === \"\") {\r\n    alert(\"Enter a url!\");\r\n    return false;\r\n  }\r\n\r\n  const isYoutubeUrlResult = isYoutubeURL(url); // Corrected the argument here\r\n  if (!isYoutubeUrlResult) {\r\n    console.log(\"url in if: \" + url);\r\n    alert(\"Please enter a Youtube URL\");\r\n    return false;\r\n  }\r\n\r\n  if (url.includes(\",\")) {\r\n    console.log(\"else if works!\");\r\n    const splittedText = url.split(\",\");\r\n    let newText = \"\";\r\n\r\n    for (let i = 0; i < splittedText.length; i++) {\r\n      newText += splittedText[i] + \" \";\r\n    }\r\n\r\n    console.log(\"new Text: \" + newText);\r\n    dispatch(downloadActions.setVideoUrl(newText));\r\n    return true;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport { isYoutubeURL, enteredUrlValidation };\r\n"],"mappings":"AAAA;;AAEA,SAASA,YAAYA,CAACC,GAAG,EAAE;EACzB;EACA,MAAMC,YAAY,GAAG,sEAAsE;EAC3F;EACAC,OAAO,CAACC,GAAG,CAAC,mBAAmB,GAAGF,YAAY,CAACG,IAAI,CAACJ,GAAG,CAAC,CAAC;EACzD,OAAOC,YAAY,CAACG,IAAI,CAACJ,GAAG,CAAC;AAC/B;AAEA,SAASK,oBAAoBA,CAACL,GAAG,EAAE;EACjC,IAAIA,GAAG,KAAK,EAAE,EAAE;IACdM,KAAK,CAAC,cAAc,CAAC;IACrB,OAAO,KAAK;EACd;EAEA,MAAMC,kBAAkB,GAAGR,YAAY,CAACC,GAAG,CAAC,CAAC,CAAC;EAC9C,IAAI,CAACO,kBAAkB,EAAE;IACvBL,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGH,GAAG,CAAC;IAChCM,KAAK,CAAC,4BAA4B,CAAC;IACnC,OAAO,KAAK;EACd;EAEA,IAAIN,GAAG,CAACQ,QAAQ,CAAC,GAAG,CAAC,EAAE;IACrBN,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7B,MAAMM,YAAY,GAAGT,GAAG,CAACU,KAAK,CAAC,GAAG,CAAC;IACnC,IAAIC,OAAO,GAAG,EAAE;IAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,YAAY,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MAC5CD,OAAO,IAAIF,YAAY,CAACG,CAAC,CAAC,GAAG,GAAG;IAClC;IAEAV,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGQ,OAAO,CAAC;IACnCG,QAAQ,CAACC,eAAe,CAACC,WAAW,CAACL,OAAO,CAAC,CAAC;IAC9C,OAAO,IAAI;EACb;EAEA,OAAO,IAAI;AACb;AAEA,SAASZ,YAAY,EAAEM,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}